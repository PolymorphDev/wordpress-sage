/**
 * Returns a transition duration by name.
 * @function transition-duration
 * @since 1.0.0
 */
@function transition-duration($name, $map: $transitions) {
	@return map-get(map-get($map, $name), duration);
}

/**
 * Returns a transition equation by name.
 * @function transition-equation
 * @since 1.0.0
 */
 @function transition-equation($name, $map: $transitions) {
	@return map-get(map-get($map, $name), equation);
}

/**
 * Creates nth-based staggering transition using delays.
 * @mixin transition-delay-nth
 * @since 1.0.0
 */
@mixin transition-stagger($value, $count, $add: 0, $mul: 1, $first: true, $selector: null, $reverse: false) {

	@for $i from 1 through $count {

		$k: $i;

		@if $first == false {
			$k: $i - 1;
		}

		@if $reverse {

			@include nth-child($i) {
				@include transition-stagger-delay-invert($count, $value, $k, $add, $mul, $selector);
			}


		} @else {

			@include nth-child($i) {
				@include transition-stagger-delay-normal($count, $value, $k, $add, $mul, $selector);
			}

		}
	}
}

/**
 * @mixin transition-stagger-delay-normal
 * @since 1.0.0
 * @hidden
 */
@mixin transition-stagger-delay-normal($count, $value, $k: 1, $add: 0, $mul: 1, $selector: null) {

	@if $selector {

		#{$selector} {
			transition-delay: (($k * $value) + $add) * $mul;
		}

	} @else {
		transition-delay: (($k * $value) + $add) * $mul;
	}

}

/**
 * @mixin transition-stagger-delay-invert
 * @since 1.0.0
 * @hidden
 */
@mixin transition-stagger-delay-invert($count, $value, $k: 1, $add: 0, $mul: 1, $selector: null) {

	@if $selector {

		#{$selector} {
			transition-delay: ((($count - $k) * $value) + $add) * $mul;
		}

	} @else {
		ttransition-delay: ((($count - $k) * $value) + $add) * $mul;
	}

}