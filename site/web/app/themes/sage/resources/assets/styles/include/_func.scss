/**
 * Converts a value to vw;
 * @function rvw
 * @sinc 1.0.0
 */
 @function rvw($val, $min: 0, $mul: 1, $upr: null, $lwr: null) {

	@if $upr == null {
		$upr: 1920;
	}

	@if $lwr == null {
		$lwr: 375;
	}

	@if $min == typo {
		$min: 0;
		@debug "Found min: typo";
	}

	@if $min == util {
		$min: 0;
		@debug "Found min: util";
	}

	$val: strip-unit($val);
	$min: strip-unit($min);

	@return calc-rvw($val, $lwr, $upr, $min, $mul);
}

/**
 * Convenience method to output a calc css property that adds 2 numbers.
 * @function calc-add
 * @sinc 1.0.0
 */
@function calc-add($a, $b) {
	$a: replace($a, "calc", "");
	$b: replace($b, "calc", "");
	@return #{"calc(#{$a} + #{$b})"};
}

/**
 * Convenience method to output a calc css property that substracts 2 numbers.
 * @function calc-add
 * @sinc 1.0.0
 */
@function calc-sub($a, $b, $m: 1) {
	$a: replace($a, "calc", "");
	$b: replace($b, "calc", "");
	@return #{"calc(#{$a} - #{$b})"};
}

/**
 * Convenience method to output a calc css property that multiplies 2 numbers.
 * @function calc-add
 * @sinc 1.0.0
 */
@function calc-mul($a, $b) {
	$a: replace($a, "calc", "");
	$b: replace($b, "calc", "");
	@return #{"calc(#{$a} * #{$b})"};
}

/**
 * Convenience method to output a calc a relative vw value.
 * @function calc-rvw
 * @sinc 1.0.0
 */
@function calc-rvw($val, $lwr, $upr, $min, $mul) {

	$val: strip-unit($val);
	$min: strip-unit($min);

	$val: $val - $min;
	$len: $upr - $lwr;

	@if $min == 0 {

		@return ($val / $upr) * 100vw;

	} @else {

		$val: #{"calc(#{$min}px + #{$val} * ((100vw - #{$lwr}px) / #{$len}))"};

		@if $mul == 1 {
			@return $val;
		}

		@return calc-mul($val, $mul);
	}
}

/**
 * Converts a photoshop tracking value to letter-spacing value.
 * @function tracking
 * @sinc 1.0.0
 */
 @function tracking($value) {
	$val: $value / 1000;
	@return #{$val}em;
}

/**
 * Indicates whether the number is a valig length;
 * @function is-valid-length
 * @since 1.0.0
 */
 @function is-valid-length($value) {
	@return (type-of($value) == "number" and not unitless($value)) or (index(auto initial inherit 0, $value) != false);
}

/**
 * Removes unit from value.
 * @function strip-unit
 * @since 1.0.0
 */
 @function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

/**
 * Replaces a string.
 * @function replace
 * @since 1.0.0
 */
@function replace($string, $search, $replace: '') {

	@if type-of($string) != string {
		@return $string;
	}

	$string: inspect($string);
	$search: inspect($search);
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

/**
 * Parses rvw units.
 * @function replace
 * @since 1.0.0
 */
@function parse-rvw($value) {

	@if type-of($value) == number {
		@if unit($value) == 'rvw' {
			$value: rvw(strip-unit($value));
		}
	}

	@return $value;
}