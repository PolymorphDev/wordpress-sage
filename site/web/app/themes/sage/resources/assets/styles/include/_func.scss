/**
 * Convenience function to negate a number.
 * @function neg
 * @sinc 1.0.0
 */
 @function neg($value) {
    $val: $value * -1;
    @return $val;
}

/**
 * Converts a unit to rem.
 * @function rem
 * @sinc 1.0.0
 */
 @function rem($val, $min: 0, $mul: 1) {

    @if $min == auto {

        @if $val > 10px {

            $min: 10px + ($val / 4);

        } @else {

            $min: $val;

        }
    }

    $val: strip-unit($val);
    $min: strip-unit($min);

    @if $min == 0 {
        @return #{($val * $mul) / 16}rem;
    }

    $val: (($val * $mul) - $min) / 16;

    @return calc(#{$min}px + #{$val}rem);
}

/**
 * Converts a unit to vw;
 * @function rvw
 * @sinc 1.0.0
 */
 @function rvw($val, $min: 0, $mul: 1) {

    @if $min == auto {

        @if $val > 10px {

            $min: 10px + ($val / 4);

        } @else {

            $min: $val;

        }
    }

    $val: strip-unit($val);
    $min: strip-unit($min);

    @if $min == 0 {
        @return #{($val / 1440) * 100}vw;
    }

    @return calc(#{$min}px + (#{$val} - #{$min}) * ((100vw - 320px) / (1440 - 320)));
}

/**
 * Converts a photoshop tracking value to letter-spacing value.
 * @function tracking
 * @sinc 1.0.0
 */
@function tracking($value) {
	@return #{($value / 1000)}em;
}

/**
 * Convenience method to output a calc css property that adds 2 numbers.
 * @function calc-add
 * @sinc 1.0.0
 */
@function calc-add($a, $b) {
    @return #{"calc(" + $a + " + " + $b + ")"};
}

/**
 * Convenience method to output a calc css property that substracts 2 numbers.
 * @function calc-add
 * @sinc 1.0.0
 */
@function calc-sub($a, $b) {
    @return #{"calc(" + $a + " - " + $b + ")"};
}

/**
 * Indicates whether the number is a valig length;
 * @function is-valid-length
 * @since 1.0.0
 */
 @function is-valid-length($value) {
	@return (type-of($value) == "number" and not unitless($value)) or (index(auto initial inherit 0, $value) != false);
}

/**
 * Removes the unit from a value.
 * @function strip-unit
 * @since 1.0.0
 */
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}